import json
import logging
import os
import re
from typing import Any, Dict, Optional

import httpx
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel, Field, ValidationError
from starlette.datastructures import FormData

# ---------------------
# Bootstrap
# ---------------------
load_dotenv()

LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("tblocker-webhook")

app = FastAPI(title="TBlocker Telegram Relay", version="1.3.5")

# ---------------------
# Aliases
# ---------------------
def _parse_aliases(env_val: Optional[str]) -> Dict[str, str]:
    """
    Parse SERVER_ALIASES env like:
      SERVER_ALIASES="test01.isgood.host=Russia YouTube, helga.freedomnet.pro=Germany"
    Whitespace around keys/values is trimmed. Keys are lowercased.
    """
    mapping: Dict[str, str] = {}
    if not env_val:
        return mapping
    for part in env_val.split(","):
        part = part.strip()
        if not part or "=" not in part:
            continue
        k, v = part.split("=", 1)
        k = k.strip().lower()
        v = v.strip()
        if k and v:
            mapping[k] = v
    return mapping

SERVER_ALIASES: Dict[str, str] = _parse_aliases(os.getenv("SERVER_ALIASES"))

def resolve_server_alias(server: Optional[str]) -> str:
    """
    Return aliased/friendly server name if configured; otherwise original or default.
    Matching is case-insensitive; strips optional ':port'.
    """
    if not server:
        return "YouTube Russia"
    raw = str(server).strip()
    key = raw.lower()
    if ":" in key:
        key = key.split(":", 1)[0]
    alias = SERVER_ALIASES.get(key)
    return alias or raw

# ---------------------
# Models
# ---------------------
class TBlockerPayload(BaseModel):
    chat_id: str = Field(..., description="–ê–¥—Ä–µ—Å–∞—Ç, –∫–æ—Ç–æ—Ä–æ–º—É tblocker –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    text: str = Field(..., description="–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –¥–µ—Ç–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

# ---------------------
# Helpers
# ---------------------
def extract_first_json_object(raw: bytes) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Å—ã—Ä–æ–≥–æ —Ç–µ–ª–∞; –µ—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –º—É—Å–æ—Ä ‚Äî –≤—ã–¥–µ–ª–∏—Ç—å
    –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –ø–æ —Å–∫–æ–±–æ—á–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É.
    """
    s = raw.lstrip()
    # –ü—Ä—è–º–∞—è –ø–æ–ø—ã—Ç–∫–∞
    try:
        return json.loads(s)
    except Exception:
        pass

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–æ–∫–µ
    try:
        text = s.decode("utf-8", errors="replace")
    except Exception:
        return None

    start = text.find("{")
    if start == -1:
        return None

    depth = 0
    in_str = False
    escape = False
    for i in range(start, len(text)):
        ch = text[i]
        if in_str:
            if escape:
                escape = False
            elif ch == "\\":
                escape = True
            elif ch == '"':
                in_str = False
        else:
            if ch == '"':
                in_str = True
            elif ch == "{":
                depth += 1
            elif ch == "}":
                depth -= 1
                if depth == 0:
                    candidate = text[start:i + 1]
                    try:
                        return json.loads(candidate)
                    except Exception:
                        break
    return None

def _to_int_safe(s: Optional[str]) -> int:
    if not s:
        return 0
    m = re.search(r"-?\d+", s)
    return int(m.group()) if m else 0

def _norm_text(t: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç tblocker:
      - –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –ª–∏—Ç–µ—Ä–∞–ª—ã '\\n' –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫–∏
      - –ø—Ä–∏–≤–æ–¥–∏–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –∫ '\n'
      - —Ç—Ä–∏–º–∏–º –ø—Ä–æ–±–µ–ª—ã —É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    if not t:
        return t
    t = t.replace("\\n", "\n")
    t = t.replace("\r\n", "\n").replace("\r", "\n")
    lines = [ln.strip() for ln in t.split("\n")]
    return "\n".join(lines)

def extract_fields(text: str) -> Dict[str, Any]:
    """
    –ù–∞–¥—ë–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è user/ip/server/action/ttl/time —Ä–µ–≥—É–ª—è—Ä–∫–∞–º–∏.
    –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤.
    """
    data: Dict[str, Any] = {}
    if not text:
        return data

    nt = _norm_text(text)

    def grab(patterns: list[str]) -> Optional[str]:
        for p in patterns:
            m = re.search(p, nt, flags=re.IGNORECASE | re.MULTILINE)
            if m:
                return m.group(1).strip()
        return None

    # user
    user = grab([r"\buser\s*:\s*([^\n]+)"])
    if user:
        data["username_raw"] = user
        data["telegram_id"] = user.split("user_", 1)[-1] if "user_" in user else user

    # ip
    ip = grab([r"\bip\s*:\s*([^\n]+)"])
    if ip:
        data["ip"] = ip

    # server
    server = grab([r"\bserver\s*:\s*([^\n]+)"])
    if server:
        data["server"] = server

    # action
    action = grab([r"\baction\s*:\s*([^\n]+)"])
    if action:
        v = action.lower()
        if v in {"block", "unblock"}:
            data["action"] = v
        else:
            data["action_raw"] = action

    # ttl
    ttl_str = grab([r"\bttl\s*\(s\)\s*:\s*([^\n]+)", r"\bttl\s*:\s*([^\n]+)"])
    if ttl_str is not None:
        data["ttl"] = _to_int_safe(ttl_str)
        data["ttl_raw"] = ttl_str

    # time
    time_val = grab([r"\btime\s*:\s*([^\n]+)"])
    if time_val:
        data["timestamp"] = time_val

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º action –ø–æ ttl, –µ—Å–ª–∏ action –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    if "action" not in data:
        ttl = int(data.get("ttl") or 0)
        data["action"] = "block" if ttl > 0 else "unblock"

    if "ttl_raw" not in data:
        data["ttl_raw"] = str(data["ttl"]) if "ttl" in data else "‚Äî"

    logger.info("Normalized text:\n%s", nt)
    return data

def build_user_message(data: Dict[str, Any]) -> Dict[str, Any]:
    server_raw = data.get("server", "YouTube Russia")
    server = resolve_server_alias(server_raw)
    timestamp = data.get("timestamp", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
    action = (data.get("action") or "block").lower().strip()
    ttl_raw = data.get("ttl_raw", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    is_unblock = (action == "unblock")

    logger.info(
        "Message branch: %s | server_raw=%s server_alias=%s ttl_raw=%s time=%s",
        "UNBLOCK" if is_unblock else "BLOCK",
        server_raw, server, ttl_raw, timestamp
    )

    if is_unblock:
        text = (
            "‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ FreedomNET —Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–Ω—è—Ç–∞.\n\n"
            f"üñ•Ô∏è <b>–°–µ—Ä–≤–µ—Ä:</b> {server}\n"
            f"üìÖ <b>–í—Ä–µ–º—è —Å–Ω—è—Ç–∏—è:</b> {timestamp}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> <code>{action}</code>\n\n"
            "üü¢ –î–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å–∞–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º FreedomNET üöÄ"
        )
    else:
        text = (
            "üö´ <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "–ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Ç—Ä–∞—Ñ–∏–∫, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ P2P-–∞–ø–¥–µ–π—Ç–µ—Ä–æ–≤ –∏–≥—Ä.\n\n"
            "‚ùó <b>–ù–∞ FreedomNET –∑–∞–ø—Ä–µ—â–µ–Ω–æ</b> —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ <b>torrent</b> ‚Äî —ç—Ç–æ –º–µ—à–∞–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "üì• –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —Å–∫–∞—á–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É:\n"
            "1Ô∏è‚É£ –í—ã–∫–ª—é—á–∏—Ç–µ VPN.\n"
            "2Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª—ã.\n"
            "3Ô∏è‚É£ –ó–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç–µ VPN.\n\n"
            "‚öôÔ∏è –ß—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∏:\n"
            "‚Ä¢ –ó–∞–∫—Ä—ã–≤–∞–π—Ç–µ torrent-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n"
            "‚Ä¢ –û—Ç–∫–ª—é—á–∞–π—Ç–µ –∞–ø–¥–µ–π—Ç–µ—Ä—ã –∏–≥—Ä –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É.\n\n"
            f"üñ•Ô∏è <b>–°–µ—Ä–≤–µ—Ä:</b> {server}\n"
            f"üìÖ <b>–í—Ä–µ–º—è —Ñ–∏–∫—Å–∞—Ü–∏–∏:</b> {timestamp}\n"
            f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {ttl_raw} –º–∏–Ω—É—Ç.\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> <code>{action}</code>\n\n"
            "üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω–∏–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üí¨"
        )

    reply_markup = {
        "inline_keyboard": [
            [{"text": "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "url": "https://t.me/FreedomSuppRobot"}],
            [{"text": "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "callback_data": "back_to_menu"}],
        ]
    }
    return {"text": text, "reply_markup": reply_markup}

async def send_telegram_message(
    token: str,
    chat_id: str,
    text: str,
    reply_markup: Optional[Dict[str, Any]] = None,
    message_thread_id: Optional[int] = None
) -> None:
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload: Dict[str, Any] = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    if message_thread_id:
        payload["message_thread_id"] = message_thread_id

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(url, json=payload)
            response.raise_for_status()
    except httpx.HTTPError as exc:
        status = getattr(exc.response, "status_code", 502)
        body = getattr(exc.response, "text", str(exc))
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %s - %s", status, body)
        raise HTTPException(status_code=502, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram") from exc

# ---------------------
# Routess
# ---------------------
@app.get("/health", tags=["monitoring"])
async def healthcheck() -> Dict[str, str]:
    return {"status": "ok", "version": app.version}

@app.post("/webhookcfvceyu123")
async def webhook_handler(request: Request) -> Dict[str, str]:
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise HTTPException(status_code=500, detail="–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")

    content_type = (request.headers.get("content-type") or "").lower()
    raw = await request.body()

    # --- full incoming webhook logging (headers + body) for debugging ---
    try:
        client_addr = request.client.host if getattr(request, "client", None) else None
    except Exception:
        client_addr = None

    try:
        headers_dict = dict(request.headers)
    except Exception:
        headers_dict = {k: v for k, v in request.headers.items()}

    try:
        body_text = raw.decode("utf-8", errors="replace")
    except Exception:
        body_text = str(raw)

    LOG_BODY_LIMIT = int(os.environ.get("LOG_BODY_LIMIT", "20000"))
    if len(body_text) > LOG_BODY_LIMIT:
        short_body = body_text[:LOG_BODY_LIMIT] + "\n...[truncated: total %d bytes]" % len(body_text)
    else:
        short_body = body_text

    masked_headers = dict(headers_dict)
    for h in ("authorization", "proxy-authorization", "cookie"):
        if h in masked_headers:
            masked_headers[h] = "<redacted>"

    logger.info(
        "Incoming webhook from=%s content-type=%s headers=%s body=\n%s",
        client_addr,
        content_type,
        masked_headers,
        short_body,
    )
    # --- end logging ---

    try:
        if "application/x-www-form-urlencoded" in content_type or "multipart/form-data" in content_type:
            form: FormData = await request.form()
            payload_dict: Dict[str, Any] = dict(form)
        else:
            obj = extract_first_json_object(raw)
            if obj is None:
                try:
                    form: FormData = await request.form()
                    payload_dict = dict(form)
                except Exception:
                    payload_dict = {"text": body_text}
            else:
                payload_dict = obj

        # Normalize common key names to (chat_id, text)
        def _get_first_key(d: Dict[str, Any], keys: list[str]) -> Optional[Any]:
            for k in keys:
                if k in d and d[k] not in (None, ""):
                    return d[k]
            return None

        candidate = _get_first_key(payload_dict, ["payload", "data", "message", "event", "body"])
        if isinstance(candidate, dict):
            payload_dict = candidate

        text_val = _get_first_key(payload_dict, ["text", "message", "msg", "body", "content", "description"])
        chat_val = _get_first_key(payload_dict, [
            "chat_id", "chatId", "telegram_id", "telegramId", "user_id", "userId",
            "user", "to", "recipient", "receiver"
        ])

        if text_val is None:
            try:
                text_val = json.dumps(payload_dict, ensure_ascii=False)
            except Exception:
                text_val = body_text

        if chat_val is None:
            chat_val = request.query_params.get("chat_id") or payload_dict.get("chat_id") or "0"

        normalized = {"chat_id": str(chat_val), "text": str(text_val)}

        payload = TBlockerPayload.model_validate(normalized)

    except ValidationError as exc:
        snippet = body_text[:1000]
        keys = list(payload_dict.keys()) if isinstance(payload_dict, dict) else "?"
        logger.warning("400 Bad payload (%s, %d bytes): %s | keys=%s | snippet=%r",
                       content_type, len(raw or b""), exc, keys, snippet)
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload")
    except Exception as exc:
        snippet = body_text[:1000]
        logger.warning("400 Unrecognized body (%s, %d bytes): %s | snippet=%r",
                       content_type, len(raw or b""), exc, snippet)
        raise HTTPException(status_code=400, detail="–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")

    # –†–∞–∑–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    data = extract_fields(payload.text)

    logger.info("Parsed fields: user=%s ip=%s server=%s action=%s ttl=%s time=%s",
                data.get("telegram_id"), data.get("ip"), data.get("server"),
                data.get("action"), data.get("ttl"), data.get("timestamp"))

    telegram_id = data.get("telegram_id") or payload.chat_id
    if not telegram_id or str(telegram_id) in ("0", ""):
        raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
    msg = build_user_message(data)
    await send_telegram_message(token, telegram_id, msg["text"], msg["reply_markup"])

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–±–µ–∑ –∫–Ω–æ–ø–æ–∫) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–µ –∏–º—è –∏ –∞–ª–∏–∞—Å
    admin_channel_id = os.getenv("ADMIN_CHANNEL_ID")
    admin_topic_id = os.getenv("ADMIN_TOPIC_ID")
    if admin_channel_id:
        server_raw = data.get("server", "‚Äî")
        server_alias = resolve_server_alias(server_raw) if server_raw != "‚Äî" else "‚Äî"
        server_line = server_alias if server_alias == server_raw else f"{server_raw} ‚Üí {server_alias}"
        admin_message = (
            "‚ÑπÔ∏è <b>tblocker webhook</b>\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{telegram_id}</code>.\n"
            f"IP: <code>{data.get('ip', '‚Äî')}</code>\n"
            f"–°–µ—Ä–≤–µ—Ä: {server_line}\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: {data.get('action', '‚Äî')}"
        )
        message_thread_id = None
        if admin_topic_id:
            try:
                message_thread_id = int(admin_topic_id)
            except (ValueError, TypeError):
                logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ADMIN_TOPIC_ID: %s", admin_topic_id)
        try:
            await send_telegram_message(token, admin_channel_id, admin_message, message_thread_id=message_thread_id)
        except HTTPException:
            pass

    return {"status": "ok"}
